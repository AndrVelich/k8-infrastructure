kube-prometheus-stack:

  # remove image!="" to fix dashboards
  # https://github.com/prometheus-operator/kube-prometheus/issues/1056
  additionalPrometheusRulesMap:
    rule-name:
      groups:
      - name: k8s.rules
        rules:
        - record: node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate
          expr: |-
            sum by (cluster, namespace, pod, container) (
              irate(container_cpu_usage_seconds_total{job="kubelet", metrics_path="/metrics/cadvisor"}[5m])
            ) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (
              1, max by(cluster, namespace, pod, node) (kube_pod_info{node!=""})
            )
        - record: node_namespace_pod_container:container_memory_working_set_bytes
          expr: |-
            container_memory_rss{job="kubelet", metrics_path="/metrics/cadvisor"}
            * on (namespace, pod) group_left(node) topk by(namespace, pod) (1,
              max by(namespace, pod, node) (kube_pod_info{node!=""})
            )
        - record: node_namespace_pod_container:container_memory_rss
          expr: |-
            container_memory_cache{job="kubelet", metrics_path="/metrics/cadvisor"}
            * on (namespace, pod) group_left(node) topk by(namespace, pod) (1,
              max by(namespace, pod, node) (kube_pod_info{node!=""})
            )
        - record: node_namespace_pod_container:container_memory_cache
          expr: |-
            container_memory_swap{job="kubelet", metrics_path="/metrics/cadvisor"}
            * on (namespace, pod) group_left(node) topk by(namespace, pod) (1,
              max by(namespace, pod, node) (kube_pod_info{node!=""})
            )

  kube-state-metrics:
    prometheus:
      monitor:
        enabled: true
        additionalLabels:
          release: kube-prometheus-stack

  prometheus-node-exporter:
    hostRootFsMount:
      enabled: false

  #storageSpec:
    ## Using PersistentVolumeClaim
    ##
    #  volumeClaimTemplate:
    #    spec:
    #      storageClassName: gluster
    #      accessModes: ["ReadWriteOnce"]
    #      resources:
    #        requests:
    #          storage: 50Gi
    #    selector: {}

    ## Using tmpfs volume
    ##
    #  emptyDir:
    #    medium: Memory

  ## Configuration for alertmanager
  ## ref: https://prometheus.io/docs/alerting/alertmanager/
  ##
  alertmanager:
    ingress:
      enabled: true

      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-sso@kubernetescrd

      labels: {}

      ## Redirect ingress to an additional defined port on the service
      # servicePort: 8081

      ## Hosts must be provided if Ingress is enabled.
      ##
      hosts:
        - alertmanager.local.k8s-infrastructure.com

    config:
      global:
        resolve_timeout: 5m
      inhibit_rules:
      - source_matchers:
          - 'severity = critical'
        target_matchers:
          - 'severity =~ warning|info'
        equal:
          - 'namespace'
          - 'alertname'
      - source_matchers:
          - 'severity = warning'
        target_matchers:
          - 'severity = info'
        equal:
          - 'namespace'
          - 'alertname'
      - source_matchers:
          - 'alertname = InfoInhibitor'
        target_matchers:
          - 'severity = info'
        equal:
          - 'namespace'
      templates:
      - '/etc/alertmanager/config/*.tmpl'

    alertmanagerSpec:
      alertmanagerConfiguration:
        name: alertmanager-config
    

  ## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
  ##
  grafana:
    enabled: true

    ## Timezone for the default dashboards
    ## Other options are: browser or a specific timezone, i.e. Europe/Luxembourg
    ##
    defaultDashboardsTimezone: browser

    adminPassword: prom-operator

    ingress:
      enabled: true

      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-sso@kubernetescrd

      hosts:
        - grafana.local.k8s-infrastructure.com

  ## Deploy a Prometheus instance
  ##
  prometheus:
    enabled: true

    prometheusSpec:
    secrets:
      - etcd-client
    
    ingress:
      enabled: true

      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
        traefik.ingress.kubernetes.io/router.middlewares: traefik-sso@kubernetescrd

      hosts:
        - prometheus.local.k8s-infrastructure.com
